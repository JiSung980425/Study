Numpy
    reshape
        - 배열을 원하는 모양으로 생성 및 변형
            x = np.array([1,2,5,8],[1,3,5,8])
            x.reshape(-1,)
            -> [1,2,5,8,1,3,5,8]
        - 반드시 전체 요소의 개수는 통일
        - -1을 사용하면 나머지 차원의 크기를 지정했을 때 전체 요소의 개수를 고려하여 마지막 차원이 자동으로 지정됨
            x = np.array([0,1,2,3,4,5,6,7])
            x.reshape(2,-1,)
            x.reshape(2,2,-1)
    
    flatten 함수는 데이터 그대로 1차원으로 변경
        - 데이터의 개수는 그대로 존재
        - 배열의 구조만 변한다

    인덱싱(indexing)
        - 리스트에 있는 값의 상대적인 주소로 값에 접근
        - 넘파이 배열의 인덱스 표현에는 ','을 지원
            * '[행][열]' 또는 '[행,열]' 형태
        - 3차원 텐서 이상은 shape에서 출력되는 랭크 순서대로 인덱싱에 접근

    슬라이싱(slicing)
        - 인덱스를 사용하여 리스트 일부를 잘라내어 반환
        - 넘파이 배열은 행과 열을 나눠 슬라이싱 가능
    
    arange
        - range 함수와 같이 차례대로 값을 생성
        - '(시작인덱스,마지막인덱스,증가값)'으로 구성
        - range 함수와 달리 증가값에 실수형이 입력되어도 값을 생성 가능
        - 소수점 값을 주기적으로 생성할 때 유용
    
    ones 함수
        - 1로만 구성된 넘파이 배열을 생성
        - 사전에 shape 값을 넣어서 원하는 크기의 넘파이 배열 생성
    
    zeros 함수
        - 0으로만 구성된 넘파이 배열을 생성
    
    empty 함수
        - 활용 가능한 메모리 공간 확보하여 반환
        - ones와 zeros는 먼저 shape의 크기만큼 메모리를 할당하고 그곳에 값을 채움
        - 해당 메모리 공간에 값이 남았을 경우 그 값을 함께 반환
        - empty는 메모리 초기화하지 않고 생성될 때마다 다른 값 반환

    ones_like 함수
        - 기존 넘파이 배열과 같은 크기로 만들어 내용을 1로 채움
    
    zeros_like 함수
        - 기존 넘파이 배열과 같은 크기로 만들어 내용을 0으로 채움

    empty_like 함수
        - 기존 넘파이 배열과 같은 크기로 만들어 빈 상태로 만듦
    
    identity 함수
        - 단위행렬을 생성
        - 매개변수 n으로 n*n 단위행렬을 생성
    
    eye 함수
        - 시작점과 행렬 크기를 지정, 단위행렬 생성
        - N은 행의 개수, M은 열의 개수를 지정
        - k는 열의 값을 기준으로 시작 인덱스
    
    diag 함수
        - 행렬의 대각성분 값을 추출
    
    uniform 함수 : 균등분포 함수
        - 'np.random.uniform(시작값, 끝값, 데이터개수)'
    
    normal 함수 : 정규분포 함수
        - 'np.random.normal(평균값, 분산, 데이터개수)'
    
    축(axis)
        - 배열의 랭크가 증가할 때마다 새로운 축이 추가되어 차원 증가
    
    sum 함수
        - 각 요소의 합을 반환
        - sum 함수를 랭크가 2 이상인 배열에 적용할 때 축으로 연산의 방향을 설정
    
    vstack 함수
        - 배열을 수직으로 붙여 하나의 행렬을 생성
    
    hstack 함수
        - 배열을 수평으로 붙여 하나의 행렬을 생성
    
    concatenate 함수
        - 축을 고려하여 두 개의 배열을 결합
        - 스택 계열의 함수와 달리 생성될 배열과 소스가 되는 배열의 차원이 같아야 함
        - 두벡터를 결합하고 싶다면, 해당 벡터를 일단 2차원 배열 꼴로 변환 후 헹렬로 나타내야 함
    
    사칙연산 함수
        - 넘파이는 파이썬과 동일하게 배열 간 사칙연산 지원
            * 행렬과 행렬, 벡터와 벡터 간 사칙연산이 가능
        - 같은 배열의 구조일 때 요소별 연산
            * 요소별 연산 : 두 배열의 구조가 동일할 경우 같은 인덱스 요소들끼리 연산
    
    배열 간의 곱셈에서는 요소별 연산과 벡터의 내적 연산 가능
        - 벡터의 내적 : 두 배열 간의 곱셈
        - 두 개의 행렬에서 첫 번째 행렬의 열 크기와 두 번째 행렬의 행 크기가 동일해야 함
        - m*n 행렬과 n*l 행렬, 벡터의 내적 연산하면 m*l의 행렬 생성

    브로드캐스팅 연산
        - 하나의 행렬과 스칼라 값들 간의 연산이나 행렬과 벡터 간의 연산
    
    비교 연산
        - 연산 결과는 항상 불린형을 가진 배열로 추출
        - 브로드캐스팅 비교 연산
            * 하나의 스칼라 값과 벡터 간의 비교 연산은 벡터 내 전체 요소에 적용
        - 요소별 비교 연산
            * 두 개의 배열 간 배열의 구조가 동일한 경우
            * 같은 위치에 있는 요소들끼리 비교 연산
        
    all 함수
        - 배열 내부의 모든 값이 참일 때는 True
        - 하나라도 참이 아닐 경우에는 False를 반환
        - and 조건을 전체 요소에 적용
    
    any 함수
        - 배열 내부의 값 중 하나라도 참일 때는 True
        - 모두 거짓일 경우 False를 반환
        - or 조건을 전체 요소에 적용
    
    where 함수
        - 배열이 불린형으로 이루어졌을 때 참인 값들의 인덱스를 반환
    
    argsort
        - 배열 내 값들을 작은 순서대로 인덱스를 반환
    
    argmax
        - 배열 내 값들 중 가장 큰 값의 인덱스를 반환

    argmin
        - 배열 내 값들 중 가장 작은 값의 인덱스를 반환
    
    불린 인덱스
        - 배열에 있는 값들을 반환할 특정 조건을 불린형의 배열에 넣어서 추출
        - 인덱스에 들어가는 배열은 불린형이어야 함
        - 불린형 배열과 추출 대상이 되는 배열의 구조가 같아야 함
    
    팬시 인덱스
        - 정수형 배열의 값을 사용하여 해당 정수의 인덱스에 위치한 값을 반환
        - 인덱스 항목에 넣을 배열은 정수로만 구성되어야 함
        - 정수 값의 범위는 대상이 되는 배열이 가지는 인덱스의 범위 내 대상이 되는 배열과 인덱스 배열의 구조가 같을 필요는 없음
               