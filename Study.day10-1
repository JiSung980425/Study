데이터
    피쳐
        - '특성'이나 '특징'이라는 의미
        - 모델을 구성하는데 데이터가 가장 큰 영향을 줌
        - 모델은 함수 형태로 표현

    데이터 테이블(data table) : 데이터를 테이블(표)로 표현한 것

    데이터 인스턴스(data instance) : 하나의 데이터
        - 튜플(tuple)이라고도 부름
        - 엑셀에서의 한줄 한줄

    데이터의 분류 : 연속형 데이터와 이산형 데이터
        - 연속형 데이터 : 값이 끊어지지 않고 계속 연결되는 종류의 데이터로, 실수와 관련된 값
            * 온도, 자동차의 속도
            * 평균, 분산 등 통계적 기법 적용 가능
        - 이산형 데이터 : 연속적 값이 아니라 분리해서 표현하는 데이터로, 일조의 라벨로 구분 가능
            * 우편번호, 성별
            * 텍스트 형태의 값도 숫자 형태로 바꾸어 수식의 입력에 할당

    데이터의 형식
        - 데이터를 호출하기 위해서는 데이터 테이블 형태로 저장될 수 있는 타입을 사용한다
        - 다양한 데이터 타입으로 데이터 테이블을 저장할 수 있다
        - 대표적으로 'CSV' 또는 'xlsx' 파일
        - 트리 형태로 저장되어 있는 'json'이나 'xml'
        - 파이썬에 특화된 데이터 저장 형태인 'pickle'
        - 큰 데이터를 저장하는 이진 데이터 형식인 'h5'

Numpy
    - 기계 학습에서는 파이썬의 기본 리스트로 충분하지 않다
    - 데이터를 처리할 때는 리스트와 리스트 간의 연산이 가능해야 하는데 파이썬의 기본 리스트는 이것을 지원하지 않기 때문이다
    - 연산 속도도 중요하기 때문에 데이터 과학자들은 기본 리스트 대신에 넘파이를 선호한다

    넘파이의 개념
        - 파이썬의 고성능 과학 계산용 라이브러리
        - 벡터나 행렬 같은 선형대수의 표현법을 코드로 처리
        - 사실상의 표준 라이브러리
        - 다차원 리스트나 크기가 큰 데이터 처리에 유리

    넘파이의 특징
        - 과학적인 계산을 위해서 만들어진 형태
        - 정적 할당의 구성 방식으로 사용하기 위하여 만들어짐
        - 행렬 연산 특화
        - 일반 List에 비해 빠르고, 메모리를 효율적으로 사용
        - 데이터를 메모리에 할당하는 방식이 기존과 다름
        - 반복문을 사용하지 않음
        - 연살할 때 병렬로 처리
        - 함수를 한 번에 많은 요소에 적용
        - 반복문 없이 데이터 배열에 대한 처리를 지원하여 빠르고 편리
        - 선형대수와 관련된 다양한 기능을 제공
        - c, c++, 포트란 등의 언어와 통합이 가능

    넘파이의 성능
        - 넘파이의 텐서 연산의 장점
            * c와 유사한 형태로 메모리를 관리하면서 c와 같은 연산 속도로 계산할 수 있다
            * 메모리 구조상 요소들이 붙어있기 때문
            * 파이썬의 가장 큰 특징인 동적 타이핑을 포기했지만, c로 구현되어 있어 배열 연산에 있어 매우 큰 성능적 우위 확보
            * 대용량 배열 연산에서 넘파이가 사실상 표준으로 사용됨
        - 연결 연산처럼 여러 배열을 붙이는 연산에서는 일반적인 리스트에 비해 느림
            * 필요할 때마다 메모리 탐색 과정으로 새로운 공간을 잡아야 하기 때문

    넘파이 배열(ndarray) : 넘파이에서 텐서 데이터를 다루는 객체
    텐서(tensor) : 선형대수의 데이터 배열
        - 랭크에 따라 이름이 다름
            0 : 스칼라
            1 : 벡터
            2 : 행렬
            3 : 3차원 텐서
            n : n차원 텐서

    배열 생성
        - np.array 함수 사용하여 배열 생성
            import numpy as np
            test_array = np.array([1,4,5,8], float) # 매개변수1은 배열정보 매개변수2는 데이터 타입으로
        - numpy 형식으로 배열의 원소를 입력할 때는 반드시 리스트 형식으로 입력
            test_array = np.array([1,4,5,8], float) (o)
            test_array = np.array(1,4,5,8) (x)

    파이썬 리스트와 넘파이 배열의 차이점
        - 텐서 구조에 따라 배열 생성
            * 배열의 모든 구성 요소에 값이 존재해야 함
                import numpy as numpy
                test_list = [[1,4,5,7], [1,4,5]]
                np.array(test_list, float) # ValueError
        - 동적 타이핑을 지원하지 않음
            * 하나의 데이터 타입만 사용
        - 데이터를 메모리에 연속적으로 나열
            * 각 값 메모리 크기가 동일
            * 검색이나 연산 속도가 리스트에 비해 훨씬 빠름

    데이터 특징을 출력하는 요소는 dtype과 shape
        - dtype은 넘파이 배열의 데이터 타입을 반환
        - shape는 넘파이 배열에서 객체의 차원에 대한 구성 정보를 반환
        - 최대차원 np.ndim
        - 원소개수 np.size

    매개변수 dtype으로 넘파이 배열의 데이터 타입 지정
        - 변수가 사용하는 메모리 크기가 정해짐
        - dtype을 실수형인 float으로 지정한다면 모든 데이터가 실수형으로 저장
        - itemsize 요소로 넘파이 배열에서 각 요소가 차지하는 바이트 확인
            * np.float64로 dtype을 선언하면 64비트, 즉 8바이트 차지
            * np.float32로 dtype을 선언하면 32비트, 즉 4바이트 차지