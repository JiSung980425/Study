3.데이터 그룹처리
    import numpy as np
    import pandas as pd

    ipl_data = {'Team': ['Riders', 'Riders', 'Devils', 'Devils', 'Kings','kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],
    'Rank': [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],
    'Year': [2014, 2015, 2014, 2015, 2014, 2015, 2016, 2017, 2016, 2014, 2015, 2017],
    'Points':[876,789,863,673,741,812,756,788,694,701,804,690]}
    df = pd.DataFrame(ipl_data)
    df
    Team	Rank	Year	Points
    0	Riders	1	2014	876
    1	Riders	2	2015	789
    2	Devils	2	2014	863
    3	Devils	3	2015	673
    4	Kings	3	2014	741
    5	kings	4	2015	812
    6	Kings	1	2016	756
    7	Kings	1	2017	788
    8	Riders	2	2016	694
    9	Royals	4	2014	701
    10	Royals	1	2015	804
    11	Riders	2	2017	690


    df.groupby("Team")['Points'].sum() #기준은 Team
    Team
    Devils    1536
    Kings     2285
    Riders    3049
    Royals    1505
    kings      812
    Name: Points, dtype: int64


    df.groupby(["Team","Year"])['Points'].sum() #기준이 Team,Year 가장 큰 기준은 Team
    Team    Year
    Devils  2014    863
            2015    673
    Kings   2014    741
            2016    756
            2017    788
    Riders  2014    876
            2015    789
            2016    694
            2017    690
    Royals  2014    701
            2015    804
    kings   2015    812
    Name: Points, dtype: int64


    c_df = df.groupby(["Team","Year"])['Points'].sum()
    c_df.index
    MultiIndex([('Devils', 2014),
                ('Devils', 2015),
                ( 'Kings', 2014),
                ( 'Kings', 2016),
                ( 'Kings', 2017),
                ('Riders', 2014),
                ('Riders', 2015),
                ('Riders', 2016),
                ('Riders', 2017),
                ('Royals', 2014),
                ('Royals', 2015),
                ( 'kings', 2015)],
            names=['Team', 'Year'])


    c_df['Devils':'Kings']
    Team    Year
    Devils  2014    863
            2015    673
    Kings   2014    741
            2016    756
            2017    788
    Name: Points, dtype: int64


    c_df.unstack()
    Year	2014	2015	2016	2017
    Team				
    Devils	863.0	673.0	NaN	NaN
    Kings	741.0	NaN	756.0	788.0
    Riders	876.0	789.0	694.0	690.0
    Royals	701.0	804.0	NaN	NaN
    kings	NaN	812.0	NaN	NaN


    c_df
    Team    Year
    Devils  2014    863
            2015    673
    Kings   2014    741
            2016    756
            2017    788
    Riders  2014    876
            2015    789
            2016    694
            2017    690
    Royals  2014    701
            2015    804
    kings   2015    812
    Name: Points, dtype: int64


    c_df.swaplevel().sort_index()
    Year  Team  
    2014  Devils    863
        Kings     741
        Riders    876
        Royals    701
    2015  Devils    673
        Riders    789
        Royals    804
        kings     812
    2016  Kings     756
        Riders    694
    2017  Kings     788
        Riders    690
    Name: Points, dtype: int64


    c_df.sum(level=0)
    C:\Users\hongj\AppData\Local\Temp/ipykernel_28576/3532011746.py:1: FutureWarning: Using the level keyword in DataFrame and Series aggregations is deprecated and will be removed in a future version. Use groupby instead. df.sum(level=1) should use df.groupby(level=1).sum().
    c_df.sum(level=0)
    Team
    Devils    1536
    Kings     2285
    Riders    3049
    Royals    1505
    kings      812
    Name: Points, dtype: int64


    c_df.sum(level=1)
    C:\Users\hongj\AppData\Local\Temp/ipykernel_28576/2060678923.py:1: FutureWarning: Using the level keyword in DataFrame and Series aggregations is deprecated and will be removed in a future version. Use groupby instead. df.sum(level=1) should use df.groupby(level=1).sum().
    c_df.sum(level=1)
    Year
    2014    3181
    2015    3078
    2016    1450
    2017    1478
    Name: Points, dtype: int64


    dc_df = df.groupby('Team')
    dc_df.get_group("Riders")
    Team	Rank	Year	Points
    0	Riders	1	2014	876
    1	Riders	2	2015	789
    8	Riders	2	2016	694
    11	Riders	2	2017	690


    dc_df.agg(min)
    Rank	Year	Points
    Team			
    Devils	2	2014	673
    Kings	1	2014	741
    Riders	1	2014	690
    Royals	1	2014	701
    kings	4	2015	812


    dc_df.agg(np.mean)
    Rank	Year	Points
    Team			
    Devils	2.500000	2014.500000	768.000000
    Kings	1.666667	2015.666667	761.666667
    Riders	1.750000	2015.500000	762.250000
    Royals	2.500000	2014.500000	752.500000
    kings	4.000000	2015.000000	812.000000


    dc_df.agg(max)
    Rank	Year	Points
    Team			
    Devils	3	2015	863
    Kings	3	2017	788
    Riders	2	2017	876
    Royals	4	2015	804
    kings	4	2015	812


    f = lambda x:(x - x.mean())/x.std()
    dc_df.transform(f)
    Rank	Year	Points
    0	-1.500000	-1.161895	1.284327
    1	0.500000	-0.387298	0.302029
    2	-0.707107	-0.707107	0.707107
    3	0.707107	0.707107	-0.707107
    4	1.154701	-1.091089	-0.860862
    5	NaN	NaN	NaN
    6	-0.577350	0.218218	-0.236043
    7	-0.577350	0.872872	1.096905
    8	0.500000	0.387298	-0.770596
    9	0.707107	-0.707107	-0.707107
    10	-0.707107	0.707107	0.707107
    11	0.500000	1.161895	-0.815759


    dc_df.filter(lambda x : x['Points'].max() < 800)
    Team	Rank	Year	Points
    4	Kings	3	2014	741
    6	Kings	1	2016	756
    7	Kings	1	2017	788


    ck=dc_df.agg(np.max)
    ck
    Rank	Year	Points
    Team			
    Devils	3	2015	863
    Kings	3	2017	788
    Riders	2	2017	876
    Royals	4	2015	804
    kings	4	2015	812


    data={
        "Team" : ["Devils", "Kings", "Riders", "Royals", "kings", "A"],
        "num" : [3, 4, 6, 2, 8, 10],
        "id" : ['d1', 'd2', 'd3', 'd4', 'd5', 'd6']
    }
    ck2=pd.DataFrame(data)
    ck2=ck2.set_index("Team")
    ck2
    num	id
    Team		
    Devils	3	d1
    Kings	4	d2
    Riders	6	d3
    Royals	2	d4
    kings	8	d5
    A	10	d6


    pd.merge(left=ck, right=ck2, how="inner", on="Team")
    Rank	Year	Points	num	id
    Team					
    Devils	3	2015	863	3	d1
    Kings	3	2017	788	4	d2
    Riders	2	2017	876	6	d3
    Royals	4	2015	804	2	d4
    kings	4	2015	812	8	d5


    pd.merge(ck,ck2,on="Team", how="right")
    Rank	Year	Points	num	id
    Team					
    Devils	3.0	2015.0	863.0	3	d1
    Kings	3.0	2017.0	788.0	4	d2
    Riders	2.0	2017.0	876.0	6	d3
    Royals	4.0	2015.0	804.0	2	d4
    kings	4.0	2015.0	812.0	8	d5
    A	NaN	NaN	NaN	10	d6


    pd.merge(ck,ck2,on="Team", how="left")
    Rank	Year	Points	num	id
    Team					
    Devils	3	2015	863	3	d1
    Kings	3	2017	788	4	d2
    Riders	2	2017	876	6	d3
    Royals	4	2015	804	2	d4
    kings	4	2015	812	8	d5


    pd.merge(ck,ck2,on="Team", how="outer")
    Rank	Year	Points	num	id
    Team					
    Devils	3.0	2015.0	863.0	3	d1
    Kings	3.0	2017.0	788.0	4	d2
    Riders	2.0	2017.0	876.0	6	d3
    Royals	4.0	2015.0	804.0	2	d4
    kings	4.0	2015.0	812.0	8	d5
    A	NaN	NaN	NaN	10	d6


    t1 = ck.reset_index(drop=True)
    t1
    Rank	Year	Points
    0	3	2015	863
    1	3	2017	788
    2	2	2017	876
    3	4	2015	804
    4	4	2015	812


    t2 = ck2.reset_index(drop=True)
    t2
    num	id
    0	3	d1
    1	4	d2
    2	6	d3
    3	2	d4
    4	8	d5
    5	10	d6


    pd.concat([t1,t2], axis=0)
    Rank	Year	Points	num	id
    0	3.0	2015.0	863.0	NaN	NaN
    1	3.0	2017.0	788.0	NaN	NaN
    2	2.0	2017.0	876.0	NaN	NaN
    3	4.0	2015.0	804.0	NaN	NaN
    4	4.0	2015.0	812.0	NaN	NaN
    0	NaN	NaN	NaN	3.0	d1
    1	NaN	NaN	NaN	4.0	d2
    2	NaN	NaN	NaN	6.0	d3
    3	NaN	NaN	NaN	2.0	d4
    4	NaN	NaN	NaN	8.0	d5
    5	NaN	NaN	NaN	10.0	d6


    pd.concat([t1,t2], axis=0).reset_index(drop=True)
    Rank	Year	Points	num	id
    0	3.0	2015.0	863.0	NaN	NaN
    1	3.0	2017.0	788.0	NaN	NaN
    2	2.0	2017.0	876.0	NaN	NaN
    3	4.0	2015.0	804.0	NaN	NaN
    4	4.0	2015.0	812.0	NaN	NaN
    5	NaN	NaN	NaN	3.0	d1
    6	NaN	NaN	NaN	4.0	d2
    7	NaN	NaN	NaN	6.0	d3
    8	NaN	NaN	NaN	2.0	d4
    9	NaN	NaN	NaN	8.0	d5
    10	NaN	NaN	NaN	10.0	d6


    pd.concat([t1,t2], axis=1).reset_index(drop=True)
    Rank	Year	Points	num	id
    0	3.0	2015.0	863.0	3	d1
    1	3.0	2017.0	788.0	4	d2
    2	2.0	2017.0	876.0	6	d3
    3	4.0	2015.0	804.0	2	d4
    4	4.0	2015.0	812.0	8	d5
    5	NaN	NaN	NaN	10	d6


    end_df = t1.append(t2).reset_index(drop=True)
    end_df
    Rank	Year	Points	num	id
    0	3.0	2015.0	863.0	NaN	NaN
    1	3.0	2017.0	788.0	NaN	NaN
    2	2.0	2017.0	876.0	NaN	NaN
    3	4.0	2015.0	804.0	NaN	NaN
    4	4.0	2015.0	812.0	NaN	NaN
    5	NaN	NaN	NaN	3.0	d1
    6	NaN	NaN	NaN	4.0	d2
    7	NaN	NaN	NaN	6.0	d3
    8	NaN	NaN	NaN	2.0	d4
    9	NaN	NaN	NaN	8.0	d5
    10	NaN	NaN	NaN	10.0	d6

    
    end_df = t2.append(t1).reset_index(drop=True)
    end_df
    num	id	Rank	Year	Points
    0	3.0	d1	NaN	NaN	NaN
    1	4.0	d2	NaN	NaN	NaN
    2	6.0	d3	NaN	NaN	NaN
    3	2.0	d4	NaN	NaN	NaN
    4	8.0	d5	NaN	NaN	NaN
    5	10.0	d6	NaN	NaN	NaN
    6	NaN	NaN	3.0	2015.0	863.0
    7	NaN	NaN	3.0	2017.0	788.0
    8	NaN	NaN	2.0	2017.0	876.0
    9	NaN	NaN	4.0	2015.0	804.0
    10	NaN	NaN	4.0	2015.0	812.0