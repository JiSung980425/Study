판다스
    판다스의 개념
        - 파이썬의 데이터 분석 라이브러리
            * 데이터 테이블을 다루는 도구
        - 기본적으로 넘파이를 사용
            * 판다스는 넘파이를 효율적으로 사용하기 위해 인덱싱, 연산, 전처리 등 다양한 함수 제공
    
    데이터프레임
        - 데이터 테이블 전체 객체
    
    시리즈
        - 각 열 데이터를 다루는 객체
    
    시리즈 객체
        - 일반적으로 하나의 피쳐 데이터를 포함하는 형태
        - 생성된 데이터프레임 안에 포함될 수 있음
        - list, dict, ndarray 등 다양한 데이터 타입이 시리즈 객체 형태로 변환되기도 함
    
    시리즈 객체를 생성하는 세 가지 요소 생성
        - 데이터
            * 기존 다른 객체처럼 값을 저장하는 요소
        - 인덱스
            * 항상 0부터 시작하고, 숫자로만 할당하는 값
            * 시리즈 객체에서는 숫자, 문자열, 0외의 값으로 시작하는 숫자, 순서가 일정하지 않은 숫자를 입력할 수 있음
            * 시리즈 객체에서는 인덱스 값의 중복을 허용
        - 데이터 타입 
            * 넘파이의 데이터 타입과 일치
            * 판다스는 넘파이의 래퍼 라이브러리
            * 넘파이의 모든 기능 지원하고 데이터 타입도 그대로 적용
    
    시리즈 객체는 객체의 이름을 변경할 수 있음
        - 열의 이름을 지정해주는 방식
        - 인덱스 이름도 추가로 지정 가능
    
    시리즈 객체 생성하기
        - 데이터프레임 객체를 먼저 생성하고 각 열에서 시리즈 객체를 뽑는 것이 일반적인 방법
        - 다양한 시퀀스형 데이터 타입으로 저장 가능
    
    판다스의 모든 객체는 인덱스 값을 기준으로 생성
        - 기존 데이터에 인덱스 값을 추가하면 NaN 값이 출력됨

    데이터프레임 객체
        - 데이터 테이블 전체를 지칭하는 객체
        - 넘파이 배열의 특성을 그대로 가짐
        - 인덱싱 : 열과 행 각각 사용하여 하나의 데이터 접근
    
    데이터프레임의 생성
        - 'read_확장자' 함수로 데이터 바로 로딩
            * .csv나 .xlsx 등 스프레드시트형 확장자 파일에서 데이터 로딩
        - 데이터프레임을 직접 생성
            * 딕셔너리 타입 데이터에서 키는 열 이름, 값은 시퀀스형 데이터 타입을 넣어 각 열의 데이터로 만듦
            * 데이터 생성시, 열 이름을 한정하면 해당 열만 추출
            * 데이터가 존재하지 않는 열을 추가하면 해당 열에는 NaN값들 추가

판다스 DATA 추출
    
    데이터 로딩
        - xlsx 형태 데이터를 호출
            * openpyxl 모듈을 설치
            * pip install openpyxl
            * read_excel 함수로 엑셀 데이터 호출
        
    데이터 추출(열 이름 사용)
        - head와 tail 함수 : 처음 n개 행이나 마지막 n개 행 호출
        - 열 이름을 리스트 형태로 넣어 호출
            * 가장 일반적인 호출 방법
            * 문자형 열 이름을 하만 넣으면 값이 시리즈 객체로 반환됨
            * 열 이름을 여러 개 넣으면 데이터프레임 객체로 반환됨

    데이터 추출(행 번호 사용)
        - 인덱스 번호로 호출
        - 기존의 리스트나 넘파이 배열 인덱싱과 동일
    
    loc 함수
        - 인덱스 이름과 열 이름으로 데이터 추출
        - 인덱스를 0부터 시작하는 숫자 아닌 다른 값으로 변경 가능
    
    iloc 함수
        - 인덱스 번호로만 데이터 호출
        - 'index location'의 약자

판다스 그룹별 집계

    그룹별 집계
        - 데이터로부터 동일한 객체를 가진 데이터만 따로 뽑아 기술통계 데이터를 추출
        - 엑셀의 피봇테이블 기능과 비슷
        - groupby 명령어는 분할 -> 적용 -> 결합 과정을 거침
            * 분할 : 같은 종류의 데이터끼리 나누는 기능
            * 적용 : 데이터 블록마다 sum, count, mean 등 연산 작용
            * 결합 : 연산 함수가 적용된 각 블록들을 합침
    
    그룹별 집계의 기본형
        df.groupby("Team")["Points"].sum()
    
    멀티 인덱스 그룹별 집계
        - 한 개 이상의 열을 기준으로 그룹별 집계를 실행
            * 리스트를 사용하여 여러 개의 열 이름을 기준으로 넣으면 여러 열이 키 값이 되어 결과 출력
            * 계측정 인덱스 형태
    
    멀티 인덱스
        - 한 개 이상의 열로 그룹별 집계 수행하면 여러 열이 모두 인덱스로 반환됨
    
    get_group 함수
        - 해당 키 값을 기준으로 분할된 데이터프레임 객체를 확인

    filter
        - 특정 조건으로 데이터를 검색

판다스 병합과 연결
    병합
        - 두 개의 데이터를 특정 기준한 기준을 가지고 하나로 통합하는 작업
    
    SQL에서는 조인이라는 표현을 더 많이 사용

    내부 조인
        - 키 값을 기준으로 두 테이블에 모두 존재하는 키 값의 행끼리 병합
    
    완전 조인
        - 두 개의 테이블에서 각각의 행을 병합
        - 두 테이블에서 동일한 키 값을 가진 행은 통합하고, 두 테이블 중 하나라도 키 값이 존재하지 않는다면 존재하는 쪽의 데이터만 남겨둠
    
    왼쪽 조인
        - 왼쪽 테이블의 값을 기준으로 같은 키 값을 소유하고 있는 행을 병합하고, 오른쪽 테이블에 해당 키 값이 존재하지 않는다면 해당 핵은 삭제
    
    오른쪽 조인
        - 오른쪽 테이블의 값을 기준으로 같은 키 값을 소유하고있는 행을 병합하고, 왼쪽 테이블에 해당 키 값이 존재하지 않는다면 해당 행은 삭제
    
    연결
        - 두 테이블을 그대로 붙임
        - 데이터의 스키마가 동일할 때 그대로 연결
        - 주로 세로로 데이터를 연결
            * concat 함수 : 두 개의 서로 다른 테이블을 하나로 합침
            * append 함수 : 기존 테이블 하나에 다른 테이블을 붙임
            